initSidebarItems({"constant":[["VERSION",""]],"mod":[["config","Details pertaining to parsing the configuration file, as well as constructing the internal objects specified by the configuration."],["ctx","The global context object that is threaded throughout the run of the program. This module also deals with some implementation details, like ensuring that the staging directory exists as part of standing up the context."],["device","Some helpers to abstract over the various types of devices that we can interact with. Much of this will probably go away at some point, and Device will become a trait instead of the enum that it is today."],["dropbox","Our interface to the dropbox API. This should really be it's own crate, but until I have the enthusiasm to implement more than the bare minimum archiver needs, it will remain vendored here."],["dropbox_content_hasher","Currently, we have vendored Dropbox's implementation of their content hashing algorithm. There's an outstanding pull request open to upstream the changes I made, at which point this can go."],["flysight","Flysight specific code. This mostly relates to parsing out the filenames that flysights create."],["mailer","Contains the MailReport trait which all mailers must implement, as well as the archiver specific glue for the `SGClient` object we use from the `sendgrid` crate."],["mass_storage","Code relating to the `mass_storage` device type. This is any device that can be mounted to the local filesystem."],["peripheral","Contains the `MountablePeripheral` trait, common to `flysight`s and `mass_storage`s. This is simply the glue that makes it easy to check if they're currently present."],["ptp_device","Our bindings to the ptp crate, which we use to talk to devices like Gopros over USB, allowing us to avoid having to pull the SD card in order to upload footage."],["pushover","Bindings written for the pushover notification service. Like Dropbox, this can and should be extracted into its own crate, but until it's a little more stable it can remain here."],["pushover_notifier","Contains the `Notify` trait, which all notifiers must implement. Contains impls, as well as a little local glue to bind `config` and `pushover` together."],["reporting","Contains the machinery for generating an upload report. This handles both building the report object up in memory, as well as rendering it to something we can mail to a user."],["staging","Machinry for locally staging files from attached devices. It includes the `Staging` trait, which when implemented allows for not implementing some of the heavy lifting."],["storage","Contains the logic for consuming the locally staged files and uploading them to the selected storage backend. Also deals with deduping (Locally hashing files to ensure that we're not pointlessly uploading things that are already there) and cleaning up the local staging area."],["version",""]]});